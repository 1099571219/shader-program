{
  // Place your demo workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "Print to console": {
    "scope": "javascript,typescript",
    "prefix": "demo-shader",
    "body": [
      "import { Mesh, PlaneGeometry, ShaderMaterial } from 'three';",
      "import type { ThreeScene } from '../js/threeScene';",
      "import eventBus from '../store';",
      "",
      "eventBus.on('threeScene', (data) => {",
      "demoMounted(data);",
      "});",
      "const vShader = `",
      "void main(){",
      "    gl_Position = projectionMatrix * modelViewMatrix * vec4(position * 1.0,1.0);",
      "}",
      "`",
      "const fShader = `",
      "void main(){",
      "    vec3 color = vec3(0.0);",
      "    gl_FragColor = vec4(color,1.0);",
      "}",
      "`",
      "const uniforms = {u_time:{value:0}} ",
      "const demoMounted = (threeScene:ThreeScene)=>{",
      "const geometry = new PlaneGeometry();",
      "const material = new ShaderMaterial({vertexShader:vShader,fragmentShader:fShader,uniforms});",
      "const plane = new Mesh(geometry,material)",
      "threeScene.scene.add(plane) ",
      "const clock = new Clock()",
      "const animate = () => {",
      "requestAnimationFrame(animate);",
      "uniforms.u_time.value = clock.getElapsedTime()",
      "threeScene.animate();",
      "};",
      "animate();",
      "}"
    ],
    "description": "demo-shader"
  }
}
